"""
Django settings for authorizator project.

Generated by 'django-admin startproject' using Django 2.2.16.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
# Service path set in docker enviroment variable $SERVICE_PATH
env_var = os.environ.get('SERVICE_PATH')
if env_var != None:
    SERVICE_PATH = env_var
else:
    raise ValueError('SERVICE_PATH enviroment variable must be set in docker')

env_var = os.environ.get('HOSTNAME')
if env_var != None:
    HOSTNAME = env_var
else:
    raise ValueError('HOSTNAME enviroment variable must be set in docker')

env_var = os.environ.get('HOST')
if env_var != None:
    ALLOWED_HOSTS = [ env_var, '127.0.0.1', HOSTNAME ]
else:
    raise ValueError('HOST enviroment variable must be set in docker')

env_var = os.environ.get('SECRET_KEY')
if env_var != None:
    SECRET_KEY = env_var
else:
    raise ValueError('SECRET_KEY enviroment variable must be set in docker')

env_var = os.environ.get('AUTHORIZATOR_API_KEY')
if env_var != None:
    AUTHORIZATOR_API_KEY = env_var
else:
    raise ValueError('AUTHORIZATOR_API_KEY enviroment variable must be set in docker')

env_var = os.environ.get('DB_NAME')
if env_var != None:
    DB_NAME = env_var
else:
    raise ValueError('DB_NAME enviroment variable must be set in docker')

env_var = os.environ.get('DB_USER')
if env_var != None:
    DB_USER = env_var
else:
    raise ValueError('DB_USER enviroment variable must be set in docker')

env_var = os.environ.get('DB_PASSWORD')
if env_var != None:
    DB_PASSWORD = env_var
else:
    raise ValueError('DB_PASSWORD enviroment variable must be set in docker')

env_var = os.environ.get('SYSTEM_API_KEY')
if env_var != None:
    SYSTEM_API_KEY = env_var
else:
    raise ValueError('SYSTEM_API_KEY enviroment variable must be set in docker')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

MEDIA_URL = SERVICE_PATH + 'media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Application definition

LOGIN_URL='/authorizator/login'

LOGIN_REDIRECT_URL = '/'

INSTALLED_APPS = [
    'service',
    'django.contrib.contenttypes',
    'django.contrib.staticfiles',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'pdc.authorization.middleware.PDCAuth'
]

ROOT_URLCONF = 'base.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'base.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': DB_NAME,
        'USER': DB_USER,
        'PASSWORD': DB_PASSWORD,
        'HOST': 'mariadb',
        'PORT': '3306',
    }
}

REST_FRAMEWORK = {
    'DEFAULT_RENDERER_CLASSES': (
        'rest_framework.renderers.JSONRenderer',
    ),


}


# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = SERVICE_PATH + 'static/'
